{"version":3,"file":"userRepository.js","sourceRoot":"","sources":["../../src/repository/userRepository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAY;AACZ,yCAAsC;AAMtC,QAAQ;AACR,yDAAqC;AAGrC,IAAa,cAAc,GAA3B,MAAa,cAAc;IAEvB,gBAAe,CAAC;IAEH,OAAO,CAAC,EAAU;;YAC3B,mCAAmC;YACnC,MAAM,IAAI,GAAmB,MAAM,cAAS,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAE7D,kBAAkB;YAClB,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;CAEJ,CAAA;AAZY,cAAc;IAD1B,sBAAU,EAAE;;GACA,cAAc,CAY1B;AAZY,wCAAc","sourcesContent":["// Inversify\r\nimport { injectable } from \"inversify\"\r\n\r\n// Interface\r\nimport { IUserRepository } from \"./IUserRepository\"\r\nimport { IUserDto } from \"../application/IUserDto\"\r\n\r\n// Class\r\nimport UserModel from \"./models/user\"\r\n\r\n@injectable()\r\nexport class UserRepository implements IUserRepository {\r\n\r\n    constructor() {}\r\n\r\n    public async getById(id: string): Promise<IUserDto> {\r\n        // Db save Object collection Users.\r\n        const user: IUserDto | any = await UserModel.findOne({ id });\r\n\r\n        // Return document\r\n        return user;\r\n    }\r\n        \r\n}"]}
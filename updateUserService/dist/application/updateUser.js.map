{"version":3,"file":"updateUser.js","sourceRoot":"","sources":["../../src/application/updateUser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA,YAAY;AACZ,yCAA+C;AAE/C,QAAQ;AACR,oDAAgD;AAShD,IAAqB,iBAAiB,GAAtC,MAAqB,iBAAiB;IAElC,YAC2C,cAA+B;QAA/B,mBAAc,GAAd,cAAc,CAAiB;IACnE,CAAC;IAEF,MAAM,CAAC,KAAU;;YACnB,IAAI;gBACA,wCAAwC;gBACxC,MAAM,IAAI,qBAAkB,KAAK,CAAE,CAAC;gBAEpC,iDAAiD;gBACjD,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;gBAEpD,MAAM,OAAO,GAAG,qCAAqC,CAAC;gBAEtD,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;aAEhC;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;aACvB;QACL,CAAC;KAAA;CAEJ,CAAA;AAvBoB,iBAAiB;IADrC,sBAAU,EAAE;IAIJ,WAAA,kBAAM,CAAC,aAAK,CAAC,eAAe,CAAC,CAAA;;GAHjB,iBAAiB,CAuBrC;kBAvBoB,iBAAiB","sourcesContent":["\r\n// Inversify\r\nimport { inject, injectable } from \"inversify\";\r\n\r\n// Types\r\nimport { TYPES } from \"../config/constant/types\"\r\n\r\n// Interface\r\nimport { IUpdateUserService } from \"./IUpdateUser\";\r\nimport { IUserRepository } from \"../repository/IUserRepository\";\r\nimport { IUserDto } from \"./IUserDto\";\r\n\r\n\r\n@injectable()\r\nexport default class UpdateUserService implements IUpdateUserService {\r\n\r\n    constructor(\r\n        @inject(TYPES.IUserRepository) private userRepository: IUserRepository,\r\n        ) {}\r\n\r\n    async update(event: any): Promise<any> {\r\n        try {\r\n            // Generate a copy of the received data.\r\n            const user: IUserDto = { ...event };\r\n\r\n            // Call the repository method to create new user.\r\n            await this.userRepository.updateById(user.id, user);\r\n\r\n            const message = `User data was updated successfully.`;\r\n\r\n            return { ok: true, message };\r\n            \r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n}"]}
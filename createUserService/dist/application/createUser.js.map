{"version":3,"file":"createUser.js","sourceRoot":"","sources":["../../src/application/createUser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA,YAAY;AACZ,yCAA+C;AAE/C,QAAQ;AACR,oDAAgD;AAOhD,QAAQ;AACR,2CAAwC;AAMxC,IAAqB,iBAAiB,GAAtC,MAAqB,iBAAiB;IAGlC,YAC2C,cAA+B,EAClC,WAAyB;QADtB,mBAAc,GAAd,cAAc,CAAiB;QAClC,gBAAW,GAAX,WAAW,CAAc;IAC1D,CAAC;IAEK,MAAM,CAAC,KAAU;;YAC1B,IAAI;gBACA,wCAAwC;gBACxC,MAAM,OAAO,qBAAkB,KAAK,CAAE,CAAC;gBAEvC,mCAAmC;gBACnC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;gBAEzC,2BAA2B;gBAC3B,OAAO,CAAC,gBAAgB,GAAG,IAAI,IAAI,EAAE,CAAC;gBAEtC,6CAA6C;gBAC7C,IAAI,IAAI,GAAG,IAAI,WAAI,CAAC,OAAO,CAAC,CAAC;gBAE7B,iDAAiD;gBACjD,MAAM,WAAW,GAAa,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAElE,IAAI,CAAC,WAAW,EAAE;oBACd,MAAM,KAAK,CAAC,8BAA8B,CAAC,CAAA;iBAC9C;gBAED,OAAO,WAAW,CAAA;aAErB;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;aACvB;QACL,CAAC;KAAA;CAEJ,CAAA;AApCoB,iBAAiB;IADrC,sBAAU,EAAE;IAKJ,WAAA,kBAAM,CAAC,aAAK,CAAC,eAAe,CAAC,CAAA;IAC7B,WAAA,kBAAM,CAAC,aAAK,CAAC,YAAY,CAAC,CAAA;;GALd,iBAAiB,CAoCrC;kBApCoB,iBAAiB","sourcesContent":["\r\n// Inversify\r\nimport { inject, injectable } from \"inversify\";\r\n\r\n// Types\r\nimport { TYPES } from \"../config/constant/types\"\r\n\r\n// Interface\r\nimport { ICreateUserService } from \"./ICreateUser\";\r\nimport { IUserRepository } from \"../repository/IUserRepository\";\r\nimport { IUserDto } from \"./IUserDto\";\r\n\r\n// Class\r\nimport { User } from \"../entities/user\";\r\n\r\n// Dependencies\r\nimport { IGeneratorId } from \"../services/uuid/IGenerator\";\r\n\r\n@injectable()\r\nexport default class CreateUserService implements ICreateUserService {\r\n\r\n\r\n    constructor(\r\n        @inject(TYPES.IUserRepository) private userRepository: IUserRepository,\r\n        @inject(TYPES.IGeneratorId) private generatorId: IGeneratorId,\r\n        ) {}\r\n\r\n    public async create(event: any): Promise<IUserDto> {\r\n        try {\r\n            // Generate a copy of the received data.\r\n            const userDTO: IUserDto = { ...event };\r\n\r\n            // Create a unique Id for our user.\r\n            userDTO.id = this.generatorId.generate();\r\n\r\n            // Create a Date High user.\r\n            userDTO.registrationDate = new Date();\r\n    \r\n            // Capture the data sent by the request body.\r\n            let user = new User(userDTO);\r\n\r\n            // Call the repository method to create new user.\r\n            const userCreated: IUserDto = await this.userRepository.save(user)\r\n\r\n            if (!userCreated) {\r\n                throw Error(\"We could not create the user\")\r\n            }\r\n    \r\n            return userCreated\r\n            \r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n}"]}